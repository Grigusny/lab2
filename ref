#include <iostream>
using namespace std;

class l_zes {
	int re, im;
public:
	l_zes (int i, int j): re(i), im(j) {}
	void wypisz();
	l_zes operator+ (l_zes& a);
    l_zes operator+ (l_zes a);  // 
    void wstaw(int i, int j)
    {  re=i; im=j;}	
};

const l_zes z1(0,0);
l_zes z2(0,0);
l_zes z3(0,0);

//void fun (char t[]){} // void fun (char *t){}  dokladnie to samo zle przladowanie

l_zes fun1 (const l_zes& a){
}
l_zes fun1(l_zes a){}  // fun1
main()
{
	//z1.wstaw(3,3);
	z2.wstaw(2,2);
	fun1(z1);
	//z3 = z1.operator+(z2);  // 
	//z3 = operator+(z2,z1);
	z3.wypisz();
    system("pause");
}
/////////////////////////////////////
void l_zes::wypisz()
{
	cout << " re  " << re << " ,  im   " << this->im<<endl;
}
///////////////////////////////////
inline l_zes l_zes::operator+ (l_zes & a)
{
	return l_zes(a.re + re, 	a.im + im);
} 
inline l_zes l_zes::operator+ (l_zes a)
{
	return l_zes(a.re + re,a.im + im);
} 

